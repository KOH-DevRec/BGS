{
  "{\"sourceRoot\":\"/root/TIC2020/src/server/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/root/TIC2020\",\"filename\":\"/root/TIC2020/src/server/bgs_server.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/root/TIC2020\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/root/TIC2020/src/server/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/root/TIC2020",
      "filename": "/root/TIC2020/src/server/bgs_server.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/root/TIC2020",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/root/TIC2020/src/server/bgs_server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/root/TIC2020/src/server/bgs_server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/root/TIC2020/src/server/",
        "sourceFileName": "bgs_server.js"
      }
    },
    "ast": null,
    "code": "const express = require('express');\n\nconst app = express();\n\nconst server = require('http').createServer(app);\n\nconst port = 3000;\n\nconst io = require('socket.io')(server);\n\nconst log4js = require('log4js');\n\nconst logger = log4js.getLogger();\n\nconst DbManager = require('./db/db-manager.js');\n\nconst db = new DbManager(); // Body-Parserの利用許可\n\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n})); // サーバの起動\n\nserver.listen(port, () => {\n  console.log('bgs app running !! URL : ', 'http://localhost:' + port);\n}); // ログイン画面に自動転送\n\napp.use('/top', express.static('./public'));\napp.get('/', (req, res) => {\n  res.redirect(302, '/top');\n}); // ページ遷移設定\n\napp.use('/top', express.static('./public'));\napp.use('/login', express.static(\"./public\"));\napp.use('/view', express.static(\"./public\"));\napp.use('/program', express.static('./public'));\napp.use('/mypage', express.static('./public'));\napp.use('/streaming', express.static('./public'));\napp.post('/api/login', (req, res) => {\n  db.isLogin(req.body.email, req.body.password).then(result => {\n    res.json(result);\n  });\n});\napp.post('/api/getChannelID', (req, res) => {\n  db.getChannelID(req.body.ID).then(result => {\n    res.json(result);\n  });\n}); // チャンネル一覧の取得(#飲食店)\n// /api/〇〇の部分をdb-manager.jsと対応させる\n\napp.post('/api/ShowChannelList', (req, res) => {\n  logger.info(\"サーバに到達\"); // req.body.〇〇が呼び出した際(Top.jsなどで)の「var data = {〇〇=△△}」と対応\n\n  try {\n    db.showChannelList(req.body.count, req.body.category).then(result => {\n      // db-manager.jsでreturnした形の結果が帰ってくる\n      logger.info(result);\n      res.json(result);\n    });\n  } catch (err) {\n    logger.info(err);\n  }\n});\napp.post('/api/ShowDetail', (req, res) => {\n  db.showDetail(req.body.ID).then(result => {\n    res.json(result);\n  });\n});\napp.post('/api/OnAir', (req, res) => {\n  db.getOnAir(req.body.streamingName).then(result => {\n    res.json(result);\n  });\n});\napp.post('/api/setOnAir', (req, res) => {\n  db.setOnAir(req.body.streamingName, req.body.streamingID).then(result => {\n    res.json(result);\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJnc19zZXJ2ZXIuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJhcHAiLCJzZXJ2ZXIiLCJjcmVhdGVTZXJ2ZXIiLCJwb3J0IiwiaW8iLCJsb2c0anMiLCJsb2dnZXIiLCJnZXRMb2dnZXIiLCJEYk1hbmFnZXIiLCJkYiIsInVzZSIsImpzb24iLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwic3RhdGljIiwiZ2V0IiwicmVxIiwicmVzIiwicmVkaXJlY3QiLCJwb3N0IiwiaXNMb2dpbiIsImJvZHkiLCJlbWFpbCIsInBhc3N3b3JkIiwidGhlbiIsInJlc3VsdCIsImdldENoYW5uZWxJRCIsIklEIiwiaW5mbyIsInNob3dDaGFubmVsTGlzdCIsImNvdW50IiwiY2F0ZWdvcnkiLCJlcnIiLCJzaG93RGV0YWlsIiwiZ2V0T25BaXIiLCJzdHJlYW1pbmdOYW1lIiwic2V0T25BaXIiLCJzdHJlYW1pbmdJRCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxNQUFNQyxHQUFHLEdBQUdGLE9BQU8sRUFBbkI7O0FBQ0EsTUFBTUcsTUFBTSxHQUFHRixPQUFPLENBQUMsTUFBRCxDQUFQLENBQWdCRyxZQUFoQixDQUE2QkYsR0FBN0IsQ0FBZjs7QUFDQSxNQUFNRyxJQUFJLEdBQUcsSUFBYjs7QUFDQSxNQUFNQyxFQUFFLEdBQUdMLE9BQU8sQ0FBQyxXQUFELENBQVAsQ0FBcUJFLE1BQXJCLENBQVg7O0FBRUEsTUFBTUksTUFBTSxHQUFHTixPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFDQSxNQUFNTyxNQUFNLEdBQUdELE1BQU0sQ0FBQ0UsU0FBUCxFQUFmOztBQUVBLE1BQU1DLFNBQVMsR0FBR1QsT0FBTyxDQUFDLG9CQUFELENBQXpCOztBQUNBLE1BQU1VLEVBQUUsR0FBRyxJQUFJRCxTQUFKLEVBQVgsQyxDQUVBOztBQUNBUixHQUFHLENBQUNV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SSxHQUFaO0FBQ0g7QUFDSixDQWJEO0FBZUFuQyxHQUFHLENBQUNzQixJQUFKLENBQVMsaUJBQVQsRUFBNEIsQ0FBQ0gsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDdENYLEVBQUFBLEVBQUUsQ0FBQzJCLFVBQUgsQ0FBY2pCLEdBQUcsQ0FBQ0ssSUFBSixDQUFTTSxFQUF2QixFQUNLSCxJQURMLENBQ1VDLE1BQU0sSUFBSTtBQUNaUixJQUFBQSxHQUFHLENBQUNULElBQUosQ0FBU2lCLE1BQVQ7QUFDSCxHQUhMO0FBSUgsQ0FMRDtBQU9BNUIsR0FBRyxDQUFDc0IsSUFBSixDQUFTLFlBQVQsRUFBdUIsQ0FBQ0gsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDakNYLEVBQUFBLEVBQUUsQ0FBQzRCLFFBQUgsQ0FBWWxCLEdBQUcsQ0FBQ0ssSUFBSixDQUFTYyxhQUFyQixFQUNLWCxJQURMLENBQ1VDLE1BQU0sSUFBSTtBQUNaUixJQUFBQSxHQUFHLENBQUNULElBQUosQ0FBU2lCLE1BQVQ7QUFDSCxHQUhMO0FBSUgsQ0FMRDtBQU9BNUIsR0FBRyxDQUFDc0IsSUFBSixDQUFTLGVBQVQsRUFBMEIsQ0FBQ0gsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDcENYLEVBQUFBLEVBQUUsQ0FBQzhCLFFBQUgsQ0FBWXBCLEdBQUcsQ0FBQ0ssSUFBSixDQUFTYyxhQUFyQixFQUFvQ25CLEdBQUcsQ0FBQ0ssSUFBSixDQUFTZ0IsV0FBN0MsRUFDS2IsSUFETCxDQUNVQyxNQUFNLElBQUk7QUFDWlIsSUFBQUEsR0FBRyxDQUFDVCxJQUFKLENBQVNpQixNQUFUO0FBQ0gsR0FITDtBQUlILENBTEQiLCJzb3VyY2VSb290IjoiL3Jvb3QvVElDMjAyMC9zcmMvc2VydmVyLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5jb25zdCBzZXJ2ZXIgPSByZXF1aXJlKCdodHRwJykuY3JlYXRlU2VydmVyKGFwcCk7XG5jb25zdCBwb3J0ID0gMzAwMDtcbmNvbnN0IGlvID0gcmVxdWlyZSgnc29ja2V0LmlvJykoc2VydmVyKTtcblxuY29uc3QgbG9nNGpzID0gcmVxdWlyZSgnbG9nNGpzJylcbmNvbnN0IGxvZ2dlciA9IGxvZzRqcy5nZXRMb2dnZXIoKTtcblxuY29uc3QgRGJNYW5hZ2VyID0gcmVxdWlyZSgnLi9kYi9kYi1tYW5hZ2VyLmpzJyk7XG5jb25zdCBkYiA9IG5ldyBEYk1hbmFnZXIoKTtcblxuLy8gQm9keS1QYXJzZXLjga7liKnnlKjoqLHlj69cbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XG5cbi8vIOOCteODvOODkOOBrui1t+WLlVxuc2VydmVyLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2JncyBhcHAgcnVubmluZyAhISBVUkwgOiAnLCAnaHR0cDovL2xvY2FsaG9zdDonICsgcG9ydCk7XG59KVxuXG4vLyDjg63jgrDjgqTjg7PnlLvpnaLjgavoh6rli5Xou6LpgIFcbmFwcC51c2UoJy90b3AnLCBleHByZXNzLnN0YXRpYygnLi9wdWJsaWMnKSk7XG5cbmFwcC5nZXQoJy8nLCAocmVxLCByZXMpID0+IHtcbiAgICByZXMucmVkaXJlY3QoMzAyLCAnL3RvcCcpXG59KVxuXG4vLyDjg5rjg7zjgrjpgbfnp7voqK3lrppcbmFwcC51c2UoJy90b3AnLCBleHByZXNzLnN0YXRpYygnLi9wdWJsaWMnKSk7XG5hcHAudXNlKCcvbG9naW4nLCBleHByZXNzLnN0YXRpYyhcIi4vcHVibGljXCIpKTtcbmFwcC51c2UoJy92aWV3JywgZXhwcmVzcy5zdGF0aWMoXCIuL3B1YmxpY1wiKSk7XG5hcHAudXNlKCcvcHJvZ3JhbScsIGV4cHJlc3Muc3RhdGljKCcuL3B1YmxpYycpKTtcbmFwcC51c2UoJy9teXBhZ2UnLCBleHByZXNzLnN0YXRpYygnLi9wdWJsaWMnKSk7XG5hcHAudXNlKCcvc3RyZWFtaW5nJywgZXhwcmVzcy5zdGF0aWMoJy4vcHVibGljJykpO1xuXG5hcHAucG9zdCgnL2FwaS9sb2dpbicsIChyZXEsIHJlcykgPT4ge1xuICAgIGRiLmlzTG9naW4ocmVxLmJvZHkuZW1haWwsIHJlcS5ib2R5LnBhc3N3b3JkKVxuICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0KTtcbiAgICAgICAgfSlcbn0pO1xuXG5hcHAucG9zdCgnL2FwaS9nZXRDaGFubmVsSUQnLCAocmVxLCByZXMpID0+IHtcbiAgICBkYi5nZXRDaGFubmVsSUQocmVxLmJvZHkuSUQpXG4gICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICByZXMuanNvbihyZXN1bHQpO1xuICAgICAgICB9KVxufSlcblxuLy8g44OB44Oj44Oz44ON44Or5LiA6Kan44Gu5Y+W5b6XKCPpo7Lpo5/lupcpXG4vLyAvYXBpL+OAh+OAh+OBrumDqOWIhuOCkmRiLW1hbmFnZXIuanPjgajlr77lv5zjgZXjgZvjgotcbmFwcC5wb3N0KCcvYXBpL1Nob3dDaGFubmVsTGlzdCcsIChyZXEsIHJlcykgPT4ge1xuICAgIGxvZ2dlci5pbmZvKFwi44K144O844OQ44Gr5Yiw6YGUXCIpO1xuICAgIC8vIHJlcS5ib2R5LuOAh+OAh+OBjOWRvOOBs+WHuuOBl+OBn+mamyhUb3AuanPjgarjganjgacp44Gu44CMdmFyIGRhdGEgPSB744CH44CHPeKWs+KWs33jgI3jgajlr77lv5xcbiAgICB0cnkge1xuICAgICAgICBkYi5zaG93Q2hhbm5lbExpc3QocmVxLmJvZHkuY291bnQsIHJlcS5ib2R5LmNhdGVnb3J5KVxuICAgICAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICAvLyBkYi1tYW5hZ2VyLmpz44GncmV0dXJu44GX44Gf5b2i44Gu57WQ5p6c44GM5biw44Gj44Gm44GP44KLXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8ocmVzdWx0KTtcbiAgICAgICAgICAgICAgICByZXMuanNvbihyZXN1bHQpO1xuICAgICAgICAgICAgfSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbG9nZ2VyLmluZm8oZXJyKTtcbiAgICB9XG59KVxuXG5hcHAucG9zdCgnL2FwaS9TaG93RGV0YWlsJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgZGIuc2hvd0RldGFpbChyZXEuYm9keS5JRClcbiAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdCk7XG4gICAgICAgIH0pXG59KVxuXG5hcHAucG9zdCgnL2FwaS9PbkFpcicsIChyZXEsIHJlcykgPT4ge1xuICAgIGRiLmdldE9uQWlyKHJlcS5ib2R5LnN0cmVhbWluZ05hbWUpXG4gICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICByZXMuanNvbihyZXN1bHQpO1xuICAgICAgICB9KVxufSlcblxuYXBwLnBvc3QoJy9hcGkvc2V0T25BaXInLCAocmVxLCByZXMpID0+IHtcbiAgICBkYi5zZXRPbkFpcihyZXEuYm9keS5zdHJlYW1pbmdOYW1lLCByZXEuYm9keS5zdHJlYW1pbmdJRClcbiAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIHJlcy5qc29uKHJlc3VsdCk7XG4gICAgICAgIH0pXG59KSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "bgs_server.js"
      ],
      "names": [
        "express",
        "require",
        "app",
        "server",
        "createServer",
        "port",
        "io",
        "log4js",
        "logger",
        "getLogger",
        "DbManager",
        "db",
        "use",
        "json",
        "urlencoded",
        "extended",
        "listen",
        "console",
        "log",
        "static",
        "get",
        "req",
        "res",
        "redirect",
        "post",
        "isLogin",
        "body",
        "email",
        "password",
        "then",
        "result",
        "getChannelID",
        "ID",
        "info",
        "showChannelList",
        "count",
        "category",
        "err",
        "showDetail",
        "getOnAir",
        "streamingName",
        "setOnAir",
        "streamingID"
      ],
      "mappings": "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",
      "sourceRoot": "/root/TIC2020/src/server/",
      "sourcesContent": [
        "const express = require('express');\nconst app = express();\nconst server = require('http').createServer(app);\nconst port = 3000;\nconst io = require('socket.io')(server);\n\nconst log4js = require('log4js')\nconst logger = log4js.getLogger();\n\nconst DbManager = require('./db/db-manager.js');\nconst db = new DbManager();\n\n// Body-Parserの利用許可\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// サーバの起動\nserver.listen(port, () => {\n    console.log('bgs app running !! URL : ', 'http://localhost:' + port);\n})\n\n// ログイン画面に自動転送\napp.use('/top', express.static('./public'));\n\napp.get('/', (req, res) => {\n    res.redirect(302, '/top')\n})\n\n// ページ遷移設定\napp.use('/top', express.static('./public'));\napp.use('/login', express.static(\"./public\"));\napp.use('/view', express.static(\"./public\"));\napp.use('/program', express.static('./public'));\napp.use('/mypage', express.static('./public'));\napp.use('/streaming', express.static('./public'));\n\napp.post('/api/login', (req, res) => {\n    db.isLogin(req.body.email, req.body.password)\n        .then(result => {\n            res.json(result);\n        })\n});\n\napp.post('/api/getChannelID', (req, res) => {\n    db.getChannelID(req.body.ID)\n        .then(result => {\n            res.json(result);\n        })\n})\n\n// チャンネル一覧の取得(#飲食店)\n// /api/〇〇の部分をdb-manager.jsと対応させる\napp.post('/api/ShowChannelList', (req, res) => {\n    logger.info(\"サーバに到達\");\n    // req.body.〇〇が呼び出した際(Top.jsなどで)の「var data = {〇〇=△△}」と対応\n    try {\n        db.showChannelList(req.body.count, req.body.category)\n            .then(result => {\n                // db-manager.jsでreturnした形の結果が帰ってくる\n                logger.info(result);\n                res.json(result);\n            })\n    } catch (err) {\n        logger.info(err);\n    }\n})\n\napp.post('/api/ShowDetail', (req, res) => {\n    db.showDetail(req.body.ID)\n        .then(result => {\n            res.json(result);\n        })\n})\n\napp.post('/api/OnAir', (req, res) => {\n    db.getOnAir(req.body.streamingName)\n        .then(result => {\n            res.json(result);\n        })\n})\n\napp.post('/api/setOnAir', (req, res) => {\n    db.setOnAir(req.body.streamingName, req.body.streamingID)\n        .then(result => {\n            res.json(result);\n        })\n})"
      ]
    },
    "sourceType": "module",
    "mtime": 1615471724064
  },
  "{\"sourceRoot\":\"/root/TIC2020/src/server/db/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/root/TIC2020\",\"filename\":\"/root/TIC2020/src/server/db/db-manager.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/root/TIC2020\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/root/TIC2020/src/server/db/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/root/TIC2020",
      "filename": "/root/TIC2020/src/server/db/db-manager.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/root/TIC2020",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/root/TIC2020/src/server/db/db-manager.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/root/TIC2020/src/server/db/db-manager.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/root/TIC2020/src/server/db/",
        "sourceFileName": "db-manager.js"
      }
    },
    "ast": null,
    "code": "const {\n  resolvePlugin\n} = require('@babel/core');\n\nconst {\n  count\n} = require('console');\n\nconst {\n  del\n} = require('superagent');\n\nconst {\n  cache\n} = require('webpack');\n\nconst log4js = require('log4js');\n\nlog4js.configure('log4js_test.json');\nconst logger = log4js.getLogger();\nlog4js.configure({\n  appenders: {\n    out: {\n      type: 'dateFile',\n      filename: 'logs/foo.log',\n      pattern: '-yyyy-MM-ddThh-mm',\n      layout: {\n        type: 'pattern',\n        pattern: '%f{2}:%l  %d{yyyy-MM-dd} %r %p %m'\n      }\n    }\n  },\n  categories: {\n    default: {\n      appenders: ['out'],\n      level: 'info',\n      enableCallStack: true\n    }\n  }\n});\nmodule.exports = class DbManager {\n  constructor() {\n    try {\n      this.util = require('util');\n      this.mariadb = require('mariadb');\n      this.pool = this.mariadb.createPool({\n        host: 'localhost',\n        user: 'bgsuser',\n        password: 'bgsbgs',\n        database: 'bgs00',\n        connectionLimit: 5\n      });\n    } catch (err) {\n      logger.info(err);\n      throw err;\n    }\n  } // ユーザIDの取得\n\n\n  async isLogin(email, password) {\n    let conn;\n\n    try {\n      conn = await this.pool.getConnection();\n      const rows = await conn.query(\"SELECT COUNT(*) AS chack FROM user WHERE email = ? AND password = ?\", [email, password]);\n\n      if (rows[0].chack != \"1\") {\n        return false;\n      }\n\n      const ans = await conn.query(\"SELECT ID, channelID FROM user WHERE email = ?\", [email]);\n      delete ans.meta;\n      return ans;\n    } catch (err) {\n      throw err;\n    } finally {\n      if (conn) {\n        conn.end();\n      }\n    }\n  } // 使ってない\n\n\n  async getChannelID(ID) {\n    let conn;\n\n    try {\n      conn = await this.pool.getConnection();\n      const channel = await conn.query(\"SELECT channelID FROM user WHERE ID = ?\", [ID]);\n      delete channel.meta;\n      return channel;\n    } catch (err) {\n      throw err;\n    } finally {\n      if (conn) {\n        conn.end();\n      }\n    }\n  }\n\n  async getOnAir(streamingName) {\n    let conn;\n\n    try {\n      conn = await this.pool.getConnection();\n      const channel = await conn.query(\"SELECT streamingID FROM onair WHERE streamingName = ?\", [streamingName]);\n      delete channel.meta;\n      return channel;\n    } catch (err) {\n      throw err;\n    } finally {\n      if (conn) {\n        conn.end();\n      }\n    }\n  }\n\n  async setOnAir(streamingName, streamingID) {\n    let conn;\n\n    try {\n      conn = await this.pool.getConnection();\n      await conn.query(\"UPDATE onair SET streamingID = ? WHERE streamingName = ?\", [streamingID, streamingName]);\n      const rows = await conn.query(\"SELECT COUNT(*) AS chack FROM onair WHERE streamingID = ?\", [streamingID]);\n\n      if (rows[0].chack == \"1\") {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      throw err;\n    } finally {\n      if (conn) {\n        conn.end();\n      }\n    }\n  } // チャンネル一覧の取得\n  // bgs_serverのdb.〇〇(引数)とasync〇〇が対応\n\n\n  async showChannelList(count, category) {\n    let conn;\n    let channel;\n\n    try {\n      conn = await this.pool.getConnection();\n\n      if (count == 1) {\n        channel = await conn.query(\"SELECT ID, name, category, picture FROM channel WHERE category LIKE ?\", [category[0]]);\n      } else if (count == 2) {\n        channel = await conn.query(\"SELECT ID, name, category, picture FROM channel WHERE category LIKE ? OR category LIKE ?\", [category[0], category[1]]);\n      } else {\n        channel = await conn.query(\"SELECT ID, name, category, picture FROM channel WHERE category LIKE ? OR category LIKE ? OR category LIKE ?\", [category[0], category[1], category[2]]);\n      }\n\n      delete channel.meta;\n      return channel;\n    } catch (err) {\n      logger.info(err);\n      throw err;\n    } finally {\n      if (conn) {\n        conn.end();\n      }\n    }\n  } // チャンネル詳細の取得\n\n\n  async showDetail(ID) {\n    let conn;\n\n    try {\n      conn = await this.pool.getConnection();\n      const channel = await conn.query(\"SELECT ID, name, time_start, time_end, category, link, regular_holiday FROM channel WHERE ID = ?\", [ID]);\n      delete channel.meta;\n      return channel;\n    } catch (err) {\n      throw err;\n    } finally {\n      if (conn) {\n        conn.end();\n      }\n    }\n  }\n\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "db-manager.js"
      ],
      "names": [
        "resolvePlugin",
        "require",
        "count",
        "del",
        "cache",
        "log4js",
        "configure",
        "logger",
        "getLogger",
        "appenders",
        "out",
        "type",
        "filename",
        "pattern",
        "layout",
        "categories",
        "default",
        "level",
        "enableCallStack",
        "module",
        "exports",
        "DbManager",
        "constructor",
        "util",
        "mariadb",
        "pool",
        "createPool",
        "host",
        "user",
        "password",
        "database",
        "connectionLimit",
        "err",
        "info",
        "isLogin",
        "email",
        "conn",
        "getConnection",
        "rows",
        "query",
        "chack",
        "ans",
        "meta",
        "end",
        "getChannelID",
        "ID",
        "channel",
        "getOnAir",
        "streamingName",
        "setOnAir",
        "streamingID",
        "showChannelList",
        "category",
        "showDetail"
      ],
      "mappings": "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",
      "sourceRoot": "/root/TIC2020/src/server/db/",
      "sourcesContent": [
        "const { resolvePlugin } = require('@babel/core');\nconst { count } = require('console');\nconst { del } = require('superagent');\n\nconst { cache } = require('webpack');\n\nconst log4js = require('log4js');\nlog4js.configure('log4js_test.json');\nconst logger = log4js.getLogger();\n\nlog4js.configure({\n    appenders: {\n      out: { \n        type: 'dateFile', \n        filename: 'logs/foo.log', \n        pattern: '-yyyy-MM-ddThh-mm', \n        layout: {\n          type: 'pattern',\n          pattern: '%f{2}:%l  %d{yyyy-MM-dd} %r %p %m'\n        }\n      }\n    },\n    categories: { default:  { appenders: ['out'], level: 'info', enableCallStack: true } }\n  });\n\nmodule.exports = class DbManager {\n\n    constructor() {\n        try {\n            this.util = require('util');\n            this.mariadb = require('mariadb');\n            this.pool = this.mariadb.createPool({\n                host: 'localhost',\n                user: 'bgsuser',\n                password: 'bgsbgs',\n                database: 'bgs00',\n                connectionLimit: 5\n            });\n        } catch (err) {\n            logger.info(err);\n            throw err;\n        }\n\n    }\n\n    // ユーザIDの取得\n    async isLogin(email, password) {\n\n        let conn;\n\n        try {\n            conn = await this.pool.getConnection();\n\n            const rows = await conn.query(\"SELECT COUNT(*) AS chack FROM user WHERE email = ? AND password = ?\", [email, password]);\n\n            if (rows[0].chack != \"1\") {\n                return false;\n            }\n\n            const ans = await conn.query(\"SELECT ID, channelID FROM user WHERE email = ?\", [email]);\n\n            delete ans.meta;\n\n            return ans;\n\n        } catch (err) {\n\n            throw err;\n\n        } finally {\n            if (conn) {\n                conn.end();\n            }\n        }\n    }\n\n    // 使ってない\n    async getChannelID(ID) {\n        let conn;\n\n        try {\n            conn = await this.pool.getConnection();\n\n            const channel = await conn.query(\"SELECT channelID FROM user WHERE ID = ?\", [ID]);\n            delete channel.meta;\n\n            return channel;\n\n        } catch (err) {\n            throw err;\n\n        } finally {\n            if (conn) {\n                conn.end();\n            }\n        }\n    }\n\n    async getOnAir(streamingName) {\n        let conn;\n\n        try {\n            conn = await this.pool.getConnection();\n\n            const channel = await conn.query(\"SELECT streamingID FROM onair WHERE streamingName = ?\", [streamingName]);\n            delete channel.meta;\n\n            return channel;\n\n        } catch (err) {\n            throw err;\n\n        } finally {\n            if (conn) {\n                conn.end();\n            }\n        }\n    }\n\n    async setOnAir(streamingName, streamingID) {\n        let conn;\n\n        try {\n            conn = await this.pool.getConnection();\n\n            await conn.query(\"UPDATE onair SET streamingID = ? WHERE streamingName = ?\", [streamingID, streamingName]);\n            const rows = await conn.query(\"SELECT COUNT(*) AS chack FROM onair WHERE streamingID = ?\", [streamingID]);\n\n            if (rows[0].chack == \"1\") {\n                return true;\n            } else {\n                return false;\n            }\n\n        } catch (err) {\n            throw err;\n\n        } finally {\n            if (conn) {\n                conn.end();\n            }\n        }\n    }\n\n    // チャンネル一覧の取得\n    // bgs_serverのdb.〇〇(引数)とasync〇〇が対応\n    async showChannelList(count, category) {\n        let conn;\n        let channel;\n\n        try {\n            conn = await this.pool.getConnection();\n\n            if (count == 1) {\n                channel = await conn.query(\"SELECT ID, name, category, picture FROM channel WHERE category LIKE ?\", [category[0]]);\n            } else if (count == 2) {\n                channel = await conn.query(\"SELECT ID, name, category, picture FROM channel WHERE category LIKE ? OR category LIKE ?\", [category[0], category[1]]);\n            } else {\n                channel = await conn.query(\"SELECT ID, name, category, picture FROM channel WHERE category LIKE ? OR category LIKE ? OR category LIKE ?\", [category[0], category[1], category[2]]);\n            }\n            delete channel.meta;\n\n            return channel;\n\n        } catch (err) {\n            logger.info(err);\n            throw err;\n\n        } finally {\n            if (conn) {\n                conn.end();\n            }\n        }\n    }\n\n    // チャンネル詳細の取得\n    async showDetail(ID) {\n        let conn;\n\n        try {\n            conn = await this.pool.getConnection();\n\n            const channel = await conn.query(\"SELECT ID, name, time_start, time_end, category, link, regular_holiday FROM channel WHERE ID = ?\", [ID]);\n            delete channel.meta;\n\n            return channel;\n\n        } catch (err) {\n            throw err;\n\n        } finally {\n            if (conn) {\n                conn.end();\n            }\n        }\n    }\n}"
      ]
    },
    "sourceType": "module",
    "mtime": 1615472789342
  }
}